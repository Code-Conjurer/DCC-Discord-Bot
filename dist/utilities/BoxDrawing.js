"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const box = {
    'topLeft': '╔',
    'center': '═',
    'topRight': '╗',
    'side': '║',
    'botRight': '╝',
    'botLeft': '╚'
};
const levelSpace = '┃  ';
const levelMarker = '┣━━';
const levelDivider = '┣┅┅┅┅┅┅';
const firstLine = '₁₁ ₀ ₁₁ ₀ ₁₀ ₁ ₁₁₁ | ₁₁ ₁₁₁ ₀₁₀ ₀₀';
const BOX_LENGTH = 65;
const breakAfterPiority = [new RegExp("[,|\\.|\\t|!|?]"), new RegExp("[ |\\-|=|{|}|)|\\\|_|\\t]")];
function BoxifyString(str) {
    const strArr = String(str).split('\n');
    return Boxify(strArr);
}
function FormatStringArr(arr) {
    let result = arr;
    let i = 0;
    while (i < result.length) {
        const s = arr[i];
        if (s.length > BOX_LENGTH) {
            let splitIndex = undefined;
            for (let i = 0; i < breakAfterPiority.length && splitIndex != -1; i++) {
                splitIndex = s.substring(BOX_LENGTH - 5, BOX_LENGTH).search(breakAfterPiority[i]);
            }
            let left = '';
            let right = '';
            if (splitIndex == -1 || splitIndex == undefined) {
                left = s.substring(0, BOX_LENGTH);
                right = s.substring(BOX_LENGTH);
            }
            else {
                splitIndex += BOX_LENGTH - 5;
                left = s.substring(0, splitIndex);
                right = s.substring(splitIndex);
            }
            result[i] = left;
            result.splice(i + 1, 0, right);
        }
        i++;
    }
    return result;
}
function FormatObject(obj, level = 0) {
    let result = '';
    Object.keys(obj).forEach(key => {
        let temp = '';
        const value = obj[key];
        if (Array.isArray(value)) {
            let atLeastOneObject = false;
            value.forEach((ele, index, arr) => {
                if (typeof ele === 'object') {
                    atLeastOneObject = true;
                    temp += '\n' + FormatObject(ele, level + 1);
                }
                else {
                    temp += level > 0 ? '\n' + levelSpace.repeat(level) + levelMarker + ' ' : '\n';
                    temp += ele;
                }
                if (atLeastOneObject && index !== arr.length - 1) {
                    temp += level > 0 ? '\n' + levelSpace.repeat(level) : '\n';
                    temp += levelDivider;
                }
            });
        }
        else if (typeof value === 'object' && Object.keys(value).length !== 0) {
            temp += '\n' + FormatObject(value, level + 1) + '\n';
        }
        else if (value !== '' && value !== undefined && value !== null) {
            temp += value + '\n';
        }
        else {
            return;
        }
        result += level > 0 ? levelSpace.repeat(level - 1) + levelMarker + ' ' : '';
        result += key + ': ';
        result += temp;
    });
    return result.replace(/\n$/, '');
}
function whiteSpaceOptimizer(s) {
    return s.replace('    ', '\t');
}
function Boxify(s) {
    if (typeof s == 'string')
        return BoxifyString(s);
    let result = firstLine + '\n';
    s = FormatStringArr(s);
    let maxLength = Math.max(...(s.map(el => el.length)));
    const top = '`' + box.topLeft + box.center.repeat(maxLength + 2) + box.topRight + '`\n';
    const bot = '`' + box.botLeft + box.center.repeat(maxLength + 2) + box.botRight + '`';
    result += top;
    s.forEach(str => {
        const spaces = ' '.repeat(maxLength - str.length);
        result += '`' + box.side + ' ' + str + spaces + ' ' + box.side + '`\n';
    });
    result += bot;
    return whiteSpaceOptimizer(result);
}
exports.default = { Boxify, FormatObject };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm94RHJhd2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3V0aWxpdGllcy9Cb3hEcmF3aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHLEdBQUc7SUFDUixTQUFTLEVBQUUsR0FBRztJQUNkLFFBQVEsRUFBRSxHQUFHO0lBQ2IsVUFBVSxFQUFFLEdBQUc7SUFDZixNQUFNLEVBQUUsR0FBRztJQUNYLFVBQVUsRUFBRSxHQUFHO0lBQ2YsU0FBUyxFQUFFLEdBQUc7Q0FDakIsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQztBQUN6QixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDMUIsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDO0FBRS9CLE1BQU0sU0FBUyxHQUFHLG9DQUFvQyxDQUFDO0FBQ3ZELE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztBQUN0QixNQUFNLGlCQUFpQixHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBQyxJQUFJLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUM7QUFFbEcsU0FBUyxZQUFZLENBQUMsR0FBVztJQUM3QixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXZDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFCLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxHQUFhO0lBRWxDLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUdqQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixPQUFPLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ3RCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsVUFBVSxFQUFFO1lBRXZCLElBQUksVUFBVSxH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